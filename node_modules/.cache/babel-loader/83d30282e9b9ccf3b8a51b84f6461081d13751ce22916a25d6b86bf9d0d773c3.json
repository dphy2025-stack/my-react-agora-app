{"ast":null,"code":"import AgoraRTM__default from 'agora-rtm-sdk';\nexport * from 'agora-rtm-sdk';\nvar createClient = function createClient(appId, config, areaCodes) {\n  var client;\n  function createClosure() {\n    if (!client) {\n      client = AgoraRTM__default.createInstance(appId, config, areaCodes);\n    }\n    return client;\n  }\n  return function () {\n    return createClosure();\n  };\n};\nvar createChannel = function createChannel(channelId) {\n  var channel;\n  function createClosure(client) {\n    if (!channel) {\n      channel = client.createChannel(channelId);\n    }\n    return channel;\n  }\n  return function (client) {\n    return createClosure(client);\n  };\n};\nvar createLazyClient = function createLazyClient() {\n  var client;\n  function createClosure(appId, config, areaCodes) {\n    if (!client) {\n      client = AgoraRTM__default.createInstance(appId, config, areaCodes);\n    }\n    return client;\n  }\n  return function (appId, config, areaCodes) {\n    return createClosure(appId, config, areaCodes);\n  };\n};\nvar createLazyChannel = function createLazyChannel() {\n  var channel;\n  function createClosure(client, channelId) {\n    if (!channel) {\n      channel = client.createChannel(channelId);\n    }\n    return channel;\n  }\n  return function (client, channelId) {\n    return createClosure(client, channelId);\n  };\n};\nvar AreaCode;\n(function (AreaCode) {\n  AreaCode[\"GLOBAL\"] = \"GLOBAL\";\n  AreaCode[\"INDIA\"] = \"INDIA\";\n  AreaCode[\"JAPAN\"] = \"JAPAN\";\n  AreaCode[\"ASIA\"] = \"ASIA\";\n  AreaCode[\"EUROPE\"] = \"EUROPE\";\n  AreaCode[\"CHINA\"] = \"CHINA\";\n  AreaCode[\"NORTH_AMERICA\"] = \"NORTH_AMERICA\";\n})(AreaCode || (AreaCode = {}));\nexport default AgoraRTM__default;\nexport { createChannel, createClient, createLazyChannel, createLazyClient };","map":{"version":3,"names":["createClient","appId","config","areaCodes","client","createClosure","AgoraRTM__default","createInstance","createChannel","channelId","channel","createLazyClient","createLazyChannel","AreaCode"],"sources":["D:\\MY FILES\\Calling Process\\node_modules\\agora-rtm-react\\src\\index.tsx"],"sourcesContent":["import AgoraRTM, { RtmChannel, RtmClient } from 'agora-rtm-sdk'\n\nexport default AgoraRTM\nexport * from 'agora-rtm-sdk'\n\n/**\n * Returns a hook to access an RTM client, use this outside your React component.\n * The returned hook gives the same client throughout the application lifecycle.\n * @param appId Agora AppID\n * @param config RTM Config\n * @param areaCodes Area Code\n * @returns React Hook to access client object\n */\nexport const createClient = (\n  appId: string,\n  config?: RtmConfig,\n  areaCodes?: AreaCode[]\n) => {\n  let client: RtmClient\n  /**\n   * A React Hook to access the RTM Client\n   * @returns RTM Client\n   */\n  function createClosure() {\n    if (!client) {\n      client = AgoraRTM.createInstance(appId, config, areaCodes)\n    }\n    return client\n  }\n  return () => createClosure()\n}\n\n/**\n * Returns a hook to access an RTM channel instance, use this outside your React component.\n * The returned hook gives the same channel instance throughout the application lifecycle.\n * @param channelId RTM Channel ID\n * @returns A React hook to access the channel instace\n */\nexport const createChannel = (channelId: string) => {\n  let channel: RtmChannel\n  /**\n   * A React Hook to access the RTM Channel\n   * @returns RTM Channel Instance\n   */\n  function createClosure(client: RtmClient) {\n    if (!channel) {\n      channel = client.createChannel(channelId)\n    }\n    return channel\n  }\n  return (client: RtmClient) => createClosure(client)\n}\n\n/**\n * Returns a hook to access an RTM client instance, use this outside your React component.\n * The returned hook accepts the RTM config on the first hook call and gives the same channel instance throughout the application lifecycle.\n * Use this when you need to create a client but the config is only available during the application runtime, don't update the config between re-renders.\n * @returns A React Hook that give you access to the RTM Client instance.\n */\nexport const createLazyClient = () => {\n  let client: RtmClient\n  /**\n   * A React hook that gives you access to the RTM Client instance\n   * @param appId Agora App ID\n   * @param config RTM Client Config\n   * @param areaCodes areaCodes\n   * @returns RTM Client instance\n   */\n  function createClosure(\n    appId: string,\n    config?: RtmConfig,\n    areaCodes?: AreaCode[]\n  ) {\n    if (!client) {\n      client = AgoraRTM.createInstance(appId, config, areaCodes)\n    }\n    return client\n  }\n  return (appId: string, config?: RtmConfig, areaCodes?: AreaCode[]) =>\n    createClosure(appId, config, areaCodes)\n}\n/**\n * Returns a hook to access an RTM channel instance, use this outside your React component.\n * The returned hook accepts the channel config on the first hook call and gives the same channel instance throughout the application lifecycle.\n * Use this when you need to create a client but the config is only available during the application runtime, don't update the config between re-renders.\n * @returns A React Hook to access the RTM channel instance\n */\nexport const createLazyChannel = () => {\n  let channel: RtmChannel\n  function createClosure(client: RtmClient, channelId: string) {\n    if (!channel) {\n      channel = client.createChannel(channelId)\n    }\n    return channel\n  }\n  return (client: RtmClient, channelId: string) =>\n    createClosure(client, channelId)\n}\n\n/**\n * @ignore\n */\ninterface RtmConfig {\n  /**\n   * Whether to enable log upload. It is set to `false` by default.\n   * - `true`: Enable log upload,\n   * - `false`: (Default) Disable log upload.\n   */\n  enableLogUpload?: boolean\n\n  /**\n   * Output log level of the SDK.\n   *\n   * You can use one or a combination of the filters. The log level follows the sequence of OFF, ERROR, WARNING, and INFO. Choose a level to see the logs preceding that level. If, for example, you set the log level to WARNING, you see the logs within levels ERROR and WARNING.\n   *\n   *  - {@link AgoraRTM.LOG_FILTER_OFF}\n   *  - {@link AgoraRTM.LOG_FILTER_ERROR}\n   *  - {@link AgoraRTM.LOG_FILTER_INFO} (Default)\n   *  - {@link AgoraRTM.LOG_FILTER_WARNING}\n   */\n  logFilter?: LogFilterType\n\n  /**\n   * Whether to enable cloud proxy.\n   */\n  enableCloudProxy?: boolean\n}\n\n/**\n * @ignore\n */\ntype LogFilterType = {\n  error: boolean\n  warn: boolean\n  info: boolean\n  track: boolean\n  debug: boolean\n}\n\n/**\n * @ignore\n */\nenum AreaCode {\n  GLOBAL = 'GLOBAL',\n  INDIA = 'INDIA',\n  JAPAN = 'JAPAN',\n  ASIA = 'ASIA',\n  EUROPE = 'EUROPE',\n  CHINA = 'CHINA',\n  NORTH_AMERICA = 'NORTH_AMERICA'\n}\n"],"mappings":";;IAaaA,YAAY,GAAG,SAAfA,YAAYA,CACvBC,KAAa,EACbC,MAAkB,EAClBC,SAAsB;EAEtB,IAAIC,MAAiB;EAKrB,SAASC,aAAaA,CAAA;IACpB,IAAI,CAACD,MAAM,EAAE;MACXA,MAAM,GAAGE,iBAAQ,CAACC,cAAc,CAACN,KAAK,EAAEC,MAAM,EAAEC,SAAS,CAAC;;IAE5D,OAAOC,MAAM;;EAEf,OAAO;IAAA,OAAMC,aAAa,EAAE;;AAC9B;IAQaG,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,SAAiB;EAC7C,IAAIC,OAAmB;EAKvB,SAASL,aAAaA,CAACD,MAAiB;IACtC,IAAI,CAACM,OAAO,EAAE;MACZA,OAAO,GAAGN,MAAM,CAACI,aAAa,CAACC,SAAS,CAAC;;IAE3C,OAAOC,OAAO;;EAEhB,OAAO,UAACN,MAAiB;IAAA,OAAKC,aAAa,CAACD,MAAM,CAAC;;AACrD;IAQaO,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAA;EAC3B,IAAIP,MAAiB;EAQrB,SAASC,aAAaA,CACpBJ,KAAa,EACbC,MAAkB,EAClBC,SAAsB;IAEtB,IAAI,CAACC,MAAM,EAAE;MACXA,MAAM,GAAGE,iBAAQ,CAACC,cAAc,CAACN,KAAK,EAAEC,MAAM,EAAEC,SAAS,CAAC;;IAE5D,OAAOC,MAAM;;EAEf,OAAO,UAACH,KAAa,EAAEC,MAAkB,EAAEC,SAAsB;IAAA,OAC/DE,aAAa,CAACJ,KAAK,EAAEC,MAAM,EAAEC,SAAS,CAAC;;AAC3C;IAOaS,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAA;EAC5B,IAAIF,OAAmB;EACvB,SAASL,aAAaA,CAACD,MAAiB,EAAEK,SAAiB;IACzD,IAAI,CAACC,OAAO,EAAE;MACZA,OAAO,GAAGN,MAAM,CAACI,aAAa,CAACC,SAAS,CAAC;;IAE3C,OAAOC,OAAO;;EAEhB,OAAO,UAACN,MAAiB,EAAEK,SAAiB;IAAA,OAC1CJ,aAAa,CAACD,MAAM,EAAEK,SAAS,CAAC;;AACpC;AA6CA,IAAKI,QAQJ;AARD,WAAKA,QAAQ;EACXA,QAAA,qBAAiB;EACjBA,QAAA,mBAAe;EACfA,QAAA,mBAAe;EACfA,QAAA,iBAAa;EACbA,QAAA,qBAAiB;EACjBA,QAAA,mBAAe;EACfA,QAAA,mCAA+B;AACjC,CAAC,EARIA,QAAQ,KAARA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}